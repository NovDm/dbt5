#!/bin/bash

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-5 Authors
#

trap 'echo "Test was interrupted by Control-C."; \
	killall BrokerageHouseMain; killall MarketExchangeMain; \
	killall DriverMain;  killall sar; killall sadc; killall vmstat; \
	killall iostat; ${DB_COMMAND} dbt5-${DBMS}-stop-db' INT
trap 'echo "Test was interrupted. Got TERM signal."; \
	killall BrokerageHouseMain; killall MarketExchangeMain; \
	killall DriverMain; killall client; killall driver;  killall sar; \
	killall sadc; killall vmstat; killall iostat; \
	${DB_COMMAND} dbt5-${DBMS}-stop-db' TERM

do_sleep()
{
    echo "Sleeping $1 seconds"
    sleep $1
}

make_directories()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	fi
	${COMMAND} mkdir -p ${OUTPUT_DIR}
	${COMMAND} mkdir -p ${BH_OUTPUT_DIR}
	${COMMAND} mkdir -p ${MEE_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DRIVER_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DB_OUTPUT_DIR}
}

stat_collection()
{
	if [ $STATS -ne 1 ]; then
		return
	fi

	ARGS=$1

	# If the this is a 1-tier test, system stats will be saved only in the db
	# directory.
	if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ]; then
		which ts ts-profile > /dev/null 2>&1
		RC=$?
		if [ $RC -gt 1 ]; then
			printf "WARNING: touchstone tools not found for driver system "
			echo "stats collection"
		else
			eval "ts sysstat -o ${DRIVER_OUTPUT_DIR}/$(hostname)/sysstat ${ARGS} &"
		fi
	fi

	# Don't collect system stats from the database system if the database
	# is a service.
	HOSTNAME=$(eval "${DB_COMMAND} hostname")
	if [ $DBAAS -eq 0 ]; then
		eval "${DB_COMMAND} which ts ts-sysstat" > /dev/null 2>&1
		RC=$?
		if [ $RC -gt 1 ]; then
			printf "WARNING: touchstone tools not found for system stats "
			printf "collection on %s\n" "${HOSTNAME}"
		else
			eval "${DB_COMMAND} ts sysstat \
					-o ${DB_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
		fi
	fi

	eval "${DB_COMMAND} which ts ts-${DBMS}-stat" > /dev/null 2>&1
	RC=$?
	if [ $RC -gt 1 ]; then
		printf "WARNING: touchstone tools not found for database stats "
		printf "collection for RDBMS %s on system %s\n" "${DBMS}" "${HOSTNAME}"
	else
		eval "${DB_COMMAND} ts ${DBMS}-stat \
				-o ${DB_OUTPUT_DIR}/${HOSTNAME}/dbstat ${DBSTATARGS} ${ARGS} &"
	fi
}

usage()
{
	if [ "$1" != "" ]; then
		echo
		echo "error: $1"
	fi

	echo ''
	echo 'usage: run_workload.sh -c <number of customers> -d <duration of test> -u <number of users>'
	echo 'other options:'
	echo '       -a <pgsql>'
	echo '       -b <database parameters>'
	echo '       -f <scale factor. (default 500)>'
	echo '       -h <database host name. (default localhost)>'
	echo '       -i <egen_path>'
	echo '       -l <pacing delay. (default 0)>'
	echo '       -n <database name. (default dbt5)>'
	echo '       -o <result output dir>'
	echo '       -p <database port number. (default 5432)>'
	echo '       -r <random number seed, invalidates test>'
	echo '       -s <delay between starting threads in milliseconds (default 1000)>'
	echo '       -S collect system stats and profile'
	echo '       -t <customers total>'
	echo '       -w <initial trade days. (default 300)>'
	echo '       -z <comment describing this test run>'
	echo ''
	echo 'Example: sh run_workload.sh -c 1000 -t 300 -u 3 -i 10'
	echo 'Test will be run for 300 seconds with 3 users, on a 1000 customers database with 10 initial trade days, and seed 5'
	echo ''
}

validate_parameter()
{
	if [ "$2" != "$3" ]; then
		usage "wrong argument '$2' for parameter '-$1'"
		exit 1
	fi
}

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

SCALE_FACTOR=500
SLEEPY=1000 # milliseconds
STATS=0
PACING_DELAY=0

while getopts "a:b:c:d:f:h:i:l:n:o:rp:s:St:u:w:z:" opt; do
	case $opt in
	a)
		DBMS=${OPTARG}
		export DATABASE=${DBMS}
		;;
	b)
		DB_PARAMS=$OPTARG
		;;
	c)
		# Configured customer count
		CUSTOMERS_INSTANCE=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $CUSTOMERS_INSTANCE
		;;
	d)
		# duration of the test
		DURATION=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DURATION
		;;
	f)
		SCALE_FACTOR=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $SCALE_FACTOR
		;;
	h)
		DB_HOSTNAME=$OPTARG
		;;
	i)
		EGENDIR=${OPTARG}
		;;
	l)
		PACING_DELAY=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $PACING_DELAY
		;;
	n)
		DB_NAME=$OPTARG
		;;
	o)
		OUTPUT_DIR=${OPTARG}
		;;
	p)
		# postmaster port
		DB_PORT=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DB_PORT
		;;
	r)
		SEED=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $SEED
		;;
	s)
		SLEEPY=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $SLEEPY
		;;
	S)
		STATS=1
		;;
	t)
		# Configured customer count
		CUSTOMERS_TOTAL=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $CUSTOMERS_TOTAL
		;;
	u)
		USERS=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $USERS
		;;
	w)
		# intial trade days
		ITD=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $ITD
		;;
	z)
		COMMENT=$OPTARG
		;;
	esac
done

# Check parameters.

if [ "x${EGENDIR}}" = "x" ]; then
	usage "specify path to EGen using -i <path>"
	exit 1
fi

if [ "x${DBMS}" = "x" ]; then
	usage "specify which dbms system to test using -a <pgsql>"
	exit 1
fi

if [ "x${DB_NAME}" = "x" ]; then
	usage "specify the database name to test using -n <dbt5>"
	exit 1
fi

if [ "x${CUSTOMERS_INSTANCE}" = "x" ]; then
	usage "specify the number of customers in this instance -c #"
	exit 1
fi

if [ "x${CUSTOMERS_TOTAL}" = "x" ]; then
	usage "specify the number of total customers -t #"
	exit 1
fi

if [ "x${DURATION}" = "x" ]; then
	usage "specify the duration of the test in seconds using -d #"
	exit 1
fi

if [ "x${USERS}" = "x" ]; then
	usage "specify the number of users using -u #"
	exit 1
fi

if [ "x${ITD}" = "x" ]; then
	usage "specify the number of initial trade days using -w #"
	exit 1
fi

if [ "x${OUTPUT_DIR}" = "x" ]; then
	usage "specify the location for results, directory must not exist, using -o <path>"
	exit 1
fi

if [ -d "${OUTPUT_DIR}" ]; then
	echo "directory '${OUTPUT_DIR}' exists, stopping to prevent possible"
	echo "clobbering of data, please specify another -o location"
	exit 1
fi

if [ ! "x${DB_HOSTNAME}" = "x" ]; then
    DB_HOSTNAME_ARG="-h ${DB_HOSTNAME}"
fi

if [ ! "x${DB_PORT}" = "x" ]; then
    DB_PORT_ARG="-p ${DB_PORT}"
fi

if [ ! "x${SEED}" = "x" ]; then
    SEEDARG="-r ${SEED}"
	echo "WARNING: INVALID RUN BECAUSE RANDOM NUMBER SEED SPECIFIED"
fi

# Determine the output directories for storing data.
BH_OUTPUT_DIR=${OUTPUT_DIR}/bh
MEE_OUTPUT_DIR=${OUTPUT_DIR}/mee
DRIVER_OUTPUT_DIR=${OUTPUT_DIR}/driver
DB_OUTPUT_DIR=${OUTPUT_DIR}/db

# Create the directories we will need.
make_directories
if [ ! "x${DB_HOSTNAME}" = x ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	make_directories ${DB_HOSTNAME}
	rsync -a -e "ssh" --delete ${DB_OUTPUT_DIR}/ \
		${DB_HOSTNAME}:${DB_OUTPUT_DIR}/
fi

# Create a readme file in the output directory and date it.
date >> ${OUTPUT_DIR}/readme.txt
echo "${COMMENT}" >> ${OUTPUT_DIR}/readme.txt
uname -a >> ${OUTPUT_DIR}/readme.txt
echo "Command line: $0 $@" >> ${OUTPUT_DIR}/readme.txt

# Output run information into the readme.txt.
echo "Database Scale Factor: ${SCALE_FACTOR}" >> ${OUTPUT_DIR}/readme.txt
echo "Database Customer Cardinality: ${CUSTOMERS_TOTAL}" >> ${OUTPUT_DIR}/readme.txt
echo "Test Duration: ${DURATION} seconds" >> ${OUTPUT_DIR}/readme.txt

if [ ! "x${DB_HOSTNAME}" = "x" ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	DB_COMMAND="ssh ${DB_HOSTNAME}"
	# Get the OS information from the database system.
	${DB_COMMAND} dbt5-get-os-info -o ${DB_OUTPUT_DIR}
	${DB_COMMAND} "uname -a >> ${DB_OUTPUT_DIR}/readme.txt"
else
	uname -a >> ${DB_OUTPUT_DIR}/readme.txt
	dbt5-get-os-info -o ${DB_OUTPUT_DIR}
fi

# Restart database.
${DB_COMMAND} dbt5-${DBMS}-stop-db
if [ ! "x${DB_HOSTNAME}" = "x" ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	${DB_COMMAND} "dbt5-${DBMS}-start-db -p \"${DB_PARAMS}\" -o ${DB_OUTPUT_DIR}" || exit 1
else
	dbt5-${DBMS}-start-db -p "${DB_PARAMS}" -o ${DB_OUTPUT_DIR} || exit 1
fi

echo ""
echo "************************************************************************"
echo "*                  DBT-5 test started                                  *"
echo "*                                                                      *"
echo "************************************************************************"
echo "*                                                                      *"
echo "*  Test consists of 4 stages:                                          *"
echo "*                                                                      *"
echo "*  1. Start of the Brokerage House server                              *"
echo "*  2. Start of the Market Exchange server                              *"
echo "*  3. Test (Start of the Customer Emulator)                            *"
echo "*  4. Processing of results                                            *"
echo "*                                                                      *"
echo "************************************************************************"
echo "Results can be found in: ${OUTPUT_DIR}"

#
# Start the Brokerage House server.
#
echo
echo "1. Starting Brokerage House server"
BrokerageHouseMain ${DB_HOSTNAME_ARG} -d ${DB_NAME} ${DB_PORT_ARG} \
		-o ${BH_OUTPUT_DIR} > ${BH_OUTPUT_DIR}/bh.out 2>&1 &

do_sleep 1

#
# Start the Market server.
#
echo
echo "2. Starting Market Exchange server"
MarketExchangeMain -c ${CUSTOMERS_INSTANCE} -t ${CUSTOMERS_TOTAL} \
		-i ${EGENDIR}/flat_in \
		-o ${MEE_OUTPUT_DIR} > ${MEE_OUTPUT_DIR}/mee.out 2>&1 &

# Start collecting data before we start the test.
SLEEP_RAMPUP=`expr ${USERS} + 1`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} \* ${SLEEPY}`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} / 1000`
SLEEPYTIME=`expr ${SLEEP_RAMPUP} + ${DURATION}`
SAMPLE_LENGTH=60
ITERATIONS=`expr ${SLEEPYTIME} / ${SAMPLE_LENGTH}`
ITERATIONS=`expr ${ITERATIONS} + 1`

# Start stats collection
stat_collection

#
# Start the Customer Driver.
#

echo
echo "3. Starting Customer driver: ${USERS} user(s)"
echo "   1 user starting every ${SLEEPY} milliseconds..."
DriverMain -c ${CUSTOMERS_INSTANCE} -t ${CUSTOMERS_TOTAL} \
		-f ${SCALE_FACTOR} -w ${ITD} -d ${DURATION} -y ${SLEEPY} \
		-u ${USERS} -n ${PACING_DELAY} ${SEEDARG} \
		-i ${EGENDIR}/flat_in \
		-o ${DRIVER_OUTPUT_DIR} > ${DRIVER_OUTPUT_DIR}/driver.out 2>&1 &
DCMPID=`ps -C DriverMain -o pid=`
echo "Results will be written to: $OUTPUT_DIR"

do_sleep ${SLEEP_RAMPUP}

# Sleep for the duration of the run.
do_sleep $DURATION

# Stop stats collection.
stat_collection -s

# Wait for DriverMain to exit
#if [ -n ${DCMPID} ]; then
	#wait ${DCMPID}
#fi

# Run some post processing analyses.
echo
echo "4. Run Post processing analyses"

RESULTSFILE="${OUTPUT_DIR}/results.txt"
dbt5-post-process ${DRIVER_OUTPUT_DIR}/ce_mix.log \
		${MEE_OUTPUT_DIR}/mee_mix.log > ${RESULTSFILE}

# Servers don't go away by themselves like the driver does, so kill it.
echo "Killing Servers..."
killall BrokerageHouseMain MarketExchangeMain DriverMain 2> /dev/null

${DB_COMMAND} dbt5-${DBMS}-stop-db

if [ ! "x${DB_HOSTNAME}" = "x" ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	rsync -a -e "ssh" --delete ${DB_HOSTNAME}:${DB_OUTPUT_DIR}/ \
			${DB_OUTPUT_DIR}/
fi

# Move the database log.  (No, not the transaction log.)
chmod 644 ${DB_OUTPUT_DIR}/log

# Post processing of Database Statistics

echo ">> Test completed."
echo "Results are in: ${OUTPUT_DIR}"
echo

cat ${RESULTSFILE}
